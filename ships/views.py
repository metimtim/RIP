from django.shortcuts import render

SHIPS = [
            {'title': 'LIRICA', 'class': 'Круизный лайнер', 'pic': 'http://127.0.0.1:9000/rip/LI.jpg', 'desc_pic': 'http://127.0.0.1:9000/rip/lirica.jpg', 'id': 1,
             'desc': 'Круизный лайнер Lirica — современное судно на 2 000 пассажиров с 700 каютами, включая люксы и номера с балконами. На борту: рестораны с интернациональной и средиземноморской кухней, бассейны, фитнес-центр, спа и вечерние шоу. Лайнер длиной 251 метр развивает скорость до 21 узла и предлагает круизы по Средиземному морю и другим направлениям.'},
            {'title': 'ORCHESTRA', 'class': 'Баржа', 'pic': 'http://127.0.0.1:9000/rip/OR.jpeg', 'desc_pic': 'http://127.0.0.1:9000/rip/OR.jpeg', 'id': 2,
             'desc': 'Баржа Orchestra — современное судно для грузоперевозок, рассчитанное на эффективное и безопасное перемещение товаров. С длиной 135 метров, она способна перевозить крупногабаритные грузы и контейнеры. На борту предусмотрены все необходимые условия для быстрой погрузки и разгрузки, а современные навигационные системы обеспечивают высокую точность маршрута. Orchestra идеально подходит для транспортировки по рекам и каналам, предлагая надежность и эффективность на каждом этапе пути.'},
            {'title': 'OPERA', 'class': 'Круизный лайнер', 'pic': 'http://127.0.0.1:9000/rip/OP.jpg', 'desc_pic': 'http://127.0.0.1:9000/rip/opera.jpg', 'id': 3,
             'desc': 'Круизный лайнер Opera — это элегантное судно, рассчитанное на 2 500 пассажиров и предлагающее более 850 кают, включая люксы и номера с балконами. На борту доступны рестораны с интернациональной и местной кухней, спа-салон, бассейны и спортивные зоны для активного отдыха. Гостям предлагается насыщенная развлекательная программа, включая живые выступления и вечерние шоу. Лайнер длиной 275 метров развивает скорость до 22 узлов и совершает круизы по популярным туристическим направлениям, таким как Средиземное море и Карибы'},
            {'title': 'SEASHORE', 'class': 'Баржа', 'pic': 'http://127.0.0.1:9000/rip/SE.jpg', 'desc_pic': 'http://127.0.0.1:9000/rip/SE.jpg', 'id': 4,
             'desc': 'Баржа Seashore — современное грузовое судно длиной 140 метров, предназначенное для перевозки больших объемов товаров по рекам и морям. Оснащенная мощными двигателями и передовыми навигационными системами, она обеспечивает безопасную и быструю транспортировку грузов. Seashore предлагает отличные условия для погрузки и разгрузки, делая её идеальным выбором для логистических операций. Баржа отличается надежностью и эффективностью, способной работать в самых разных климатических и морских условиях.'},
            {'title': 'VIRTUOSA', 'class': 'Катер', 'pic': 'http://127.0.0.1:9000/rip/VI.jpeg', 'desc_pic': 'http://127.0.0.1:9000/rip/VI.jpeg', 'id': 5,
             'desc': 'Катер Virtuosa — элегантное 8-местное судно, оснащённое мощным двигателем и современным оборудованием для комфортных морских прогулок. С длиной 7.5 метров и шириной 2.5 метра, он обеспечивает отличную стабильность и управляемость. Интерьер включает уютные сиденья, просторную палубу и функциональную кухню. Максимальная скорость составляет 40 узлов, а запас топлива позволяет путешествовать на дальние расстояния. Идеален для семейных поездок и романтических выездов.'},
]

REQUESTS = [
    {
        'id': 1, 'port_name': 'Порт Крым', 'date': '12.05.2024', 'ship_ids': [1, 3]
    }
]

def home(request):
    for req in REQUESTS:
        basket_count = len(req['ship_ids'])
    return render(request, 'index.html', {'data' : {
        'ships': SHIPS,
        'requests': REQUESTS,
        'basket_count': basket_count,
    }})

def ship(request, id):
    sh = list(filter(lambda x: x['id'] == id, SHIPS))[0]
    title = sh['title']
    desc = sh['desc']
    desc_pic = sh['desc_pic']
    return render(request, 'ship.html', {'data' : {
        'title': title,
        'desc': desc,
        'pic': desc_pic,
        'id': id
    }})

def search(request):
    ftitle = request.GET['text']
    for req in REQUESTS:
        basket_count = len(req['ship_ids'])
    sh_filtered = SHIPS
    if ftitle != "":
        sh_filtered = list(filter(lambda x: ftitle.lower() in x['class'].lower(), SHIPS))

    return render(request, 'search.html', {'data' : {
        'ships': sh_filtered,
        'basket_count': basket_count,
    }})

def basket(request):
    id_request = REQUESTS[0]['id']
    return render(request, 'basket.html', {'data' : {
        'ships': SHIPS,
        'requests': REQUESTS,
        'dinamic_id': id_request,

    }})